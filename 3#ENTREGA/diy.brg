%{
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include "node.h"
#include "tabid.h"
#include "postfix.h"

extern FILE *outfp;
extern int sizeOfLocalVariable;
extern int sizeOfArgs;


int lbl;

char *dupstr(const char *s);

static long brklbl[20], brkcnt; /* break labels */
/* label _L0 is a break without a while/switch) */

static char *extrns[100]; /* emit externs at the end only */
static int extcnt;

int lbl;
char *mklbl(int n) {
  static char buf[20];
  sprintf(buf, "_i%d", n);
  return strcpy(malloc(strlen(buf)+1),buf);
}

static void outstr(char *s) {
  while (*s) fprintf(outfp, pfCHAR, (unsigned char)*s++);
  fprintf(outfp, pfCHAR, 0);
}
static char *mkfunc(char *s) {
  static char buf[80];
  strcpy(buf, "_");
  strcat(buf, s);
  return buf;
}
%}
%term t_END=';' t_OPENP='(' t_COMA=',' t_BRACKET='{' ADD='+' SUB='-' MUL='*' DIV='/'
%term MOD='%' EQ='=' LT='<' GT='>'
%include "y.tab.h"
%%


finit:  t_OPENP(blocop, params) 1 {}

blocop: bloco    1 {}

bloco:  t_BRACKET(list, decls) 	 1 {}

decls: NIL 				   1 {}
decls: t_END(decls, param) 1 {}

list:   base 	 		  1 {}
list: 	t_END(list, base) 1 {}

base:   expr 	 1 {}

params: param 				   1 {}
params: t_COMA(params, param)  1 {}

param: PARAM(tipo, ID) 		1 {} 

args:  t_COMA(NIL, expr)  1 {p->place = RIGHT_CHILD(p)->place;}
args:  t_COMA(args, expr) 1 {p->place = LEFT_CHILD(p)->place + RIGHT_CHILD(p)->place;}

tipo: INTEGER 	1 {}
tipo: STRING 	1 {}
tipo: NUMBER 	1 {}

lv:    LOCAL  1 {fprintf(outfp, pfLOCAL, p->value.i * (pfWORD/4));}

expr:   iexpr   1 {p->place = 4;}
expr:   sexpr   1 {p->place = 4;}
expr:   rexpr   1 {p->place = 8;}
expr:   CALL(ID, args) 	1 {fprintf(outfp, pfCALL pfTRASH pfPUSH, mkfunc(LEFT_CHILD(p)->value.s), (int)((RIGHT_CHILD(p)->place)));}
expr:   CALL(ID, VOID) 	1 {}



iexpr: INT 			 	1 {fprintf(outfp, pfIMM, p->value.i);}
iexpr:	ADD(iexpr,iexpr)	1 { fprintf(outfp, pfADD); }
iexpr:	SUB(iexpr,iexpr)	1 { fprintf(outfp, pfSUB); }
iexpr:	MUL(iexpr,iexpr)	1 { fprintf(outfp, pfMUL); }
iexpr:	DIV(iexpr,iexpr)	1 { fprintf(outfp, pfDIV); }
iexpr:	MOD(expr,expr)		1 { fprintf(outfp, pfMOD); }
iexpr:	EQ(iexpr,iexpr)		1 { fprintf(outfp, pfEQ); }
iexpr:	NE(iexpr,iexpr)		1 { fprintf(outfp, pfNE); }
iexpr:	LT(iexpr,iexpr)		1 { fprintf(outfp, pfLT); }
iexpr:	LE(iexpr,iexpr)		1 { fprintf(outfp, pfLE); }
iexpr:	GT(iexpr,iexpr)		1 { fprintf(outfp, pfGT); }
iexpr:	GE(iexpr,iexpr)		1 { fprintf(outfp, pfGE); }
%!iexpr:	UMINUS(iexpr)	1 { fprintf(outfp, pfNEG); }
%!iexpr:  rexpr 			1 { fprintf(outfp, pfD2I);}

iexpr: lv 			 		1 {fprintf(outfp, pfLOAD);}

iexpr: ATR(iassign, lv) 	1 { fprintf(outfp, pfSTORE);}
iexpr: ATR(iexpr, LOCAL)	1 { fprintf(outfp, pfDUP pfLOCA, RIGHT_CHILD(p)->value.i * (pfWORD/4)); }




iassign: iexpr 				1 {fprintf(outfp, pfDUP);}


rexpr: REAL 	 		1 {/*fprintf(outfp, p->value.d);*/}
rexpr: ATR(rassign, lv) 	1 {fprintf(outfp, pfSTORE);}

rassign: rexpr 1 {fprintf(outfp, pfDUP);}


sexpr:  STR 	 		1 {lbl++; fprintf(outfp, pfRODATA pfALIGN pfLABEL, mklbl(lbl)); outstr(p->value.s); fprintf(outfp, pfTEXT pfADDR, mklbl(lbl));}
sexpr: ATR(sassign, lv) 	1 {fprintf(outfp, pfSTORE);}


sassign: sexpr 1 {fprintf(outfp, pfDUP);}




%%
#include "y.tab.h"
extern void yyerror(const char*);
extern char **yynames;
extern int trace;

void externs() {
  int i;
  
  for (i = 0; i < extcnt; i++)
    if (extrns[i])
      fprintf(outfp, pfEXTRN, extrns[i]);
}

void function(int pub, Node *type, char *name, Node *body) {
	Node *bloco = LEFT_CHILD(body);
	IDpop();
	if (bloco != 0) { /* not a forward declaration */
		long par;
		int fwd = IDfind(name, &par);
		if (fwd > 40) yyerror("duplicate function");
		else {
			IDreplace(fwd+40, name, par);
			fflush(stdout);
  			fprintf(outfp, pfTEXT pfALIGN pfGLOBL pfLABEL pfENTER, mkfunc(name), pfFUNC, mkfunc(name), sizeOfLocalVariable * (pfWORD/4));
  			yyselect(body);
  			fprintf(outfp, pfLEAVE pfRET); /* just in case ... */
  			freeNode(body);
  			sizeOfLocalVariable = 0;
			sizeOfArgs = 8;
			int i;
			for (i = 0; i < extcnt; i++)
    			if (extrns[i] && strcmp(extrns[i], mkfunc(name)) == 0) 
    				extrns[i] = 0;
			}
	}
	else {
		char *array = malloc(sizeof(char)*80);
		array[0] = '\0';

		/*char array[80] ;
		array[0] = '\0';*/
		strcpy(array, "_");
		strcat(array, name);
		extrns[extcnt++] = array;
		
	}
}
